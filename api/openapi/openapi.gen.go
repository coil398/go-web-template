// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// User defines model for User.
type User struct {
	// The date that the user was created.
	CreateDate  *openapi_types.Date `json:"createDate,omitempty"`
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`
	Email       openapi_types.Email `json:"email"`

	// Set to true if the user's email has been verified.
	EmailVerified bool   `json:"emailVerified"`
	FirstName     string `json:"firstName"`

	// Unique identifier for the given user.
	Id       int    `json:"id"`
	LastName string `json:"lastName"`
}

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody struct {
	DateOfBirth openapi_types.Date `json:"dateOfBirth"`
	Email       string             `json:"email"`
	FirstName   string             `json:"firstName"`
	LastName    string             `json:"lastName"`
}

// PatchUsersUserIdJSONBody defines parameters for PatchUsersUserId.
type PatchUsersUserIdJSONBody struct {
	DateOfBirth *string `json:"dateOfBirth,omitempty"`

	// If a new email is given, the user's email verified property will be set to false.
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
}

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// PatchUsersUserIdJSONRequestBody defines body for PatchUsersUserId for application/json ContentType.
type PatchUsersUserIdJSONRequestBody PatchUsersUserIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create New User
	// (POST /user)
	PostUser(ctx echo.Context) error
	// Get User Info by User ID
	// (GET /users/{userId})
	GetUsersUserId(ctx echo.Context, userId int) error
	// Update User Information
	// (PATCH /users/{userId})
	PatchUsersUserId(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// GetUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserId(ctx, userId)
	return err
}

// PatchUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/user", wrapper.PostUser)
	router.GET(baseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PATCH(baseURL+"/users/:userId", wrapper.PatchUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXS3PbNhD+K5htZ3qhJEp2U5un2nWc0UzrZpy4l9QHiFyKiEmABkDJGo3+e2dB8KGH",
	"bcXJoSdHBPb17bf7IWuIVVEqidIaiNZg4gwL7v55Z1DTX3ziRZmjgejLGhJu8e/0UmibQQTj8/PfBuNw",
	"cDKGALDgIocIeC5iHJpC2Oz3OX0bxqpozv9BLVKBCURWVxhAKrSxN7xAiOCCDCEAkUA0Pp0EkPP27BO5",
	"gwCMmMu78opb+jgJx+eD8GwwOYXNfQClViVqK9ClH2vkFuuba0jQxFqUVigJEXzOkFElzGbcMpshqwxq",
	"tuSG1WbJEAJIlS64hcgVDQHYVUlRjdVCzmETbIPRArWLy6tuPHDr7mb95bmrHYa7dX1Cy6xiBC0TaVvY",
	"L4Y5Q5Zxw2aIki28i2EXZKZUjlxSlF5T1vs5iAOB76R4pJgJSkuONUuVdvHnYoHSZdGLJaTFOWry1vV4",
	"L9QmAI2PldBU6heK20+tZxq0gG3jcx+AFdZ1xJG5ja9mXzG2sKEQQqbKBfc3LRoLASxQm7q28TCkRFWJ",
	"kpcCIjgZ0qcASm4zR7VR5UelVMbug/OHoxTjTOKyRYKoyunCNIEIPipjfYpUMhp7qZKVo7GSFqXzyssy",
	"F7EzGn015Lo/nOsmDvlhl2rGrjHP1ZJOFjyv6jHYHd93fn668Z2p2TB1llvT2x/USzWDren0kRye9QZx",
	"aGzN486wHD8Veycv0/N4Qr3CpX7C9weps91m6qGjvMQYjeF6xVKBeWLaWbj4OKXxjPf54DIzpZKmBmsS",
	"ht/Y/Btcvtj5/jqESTgJB+PxYHy2U+e3cWJnG6U8N3iIKW6hT45gzM8aU4jgp1EnSiOvSCM3Hgdgd0XX",
	"1E8Ix9Mauu1LfwljhJyzW99+NpU1AenYGZ3vG713O/Mi18iTFfvMH1A6DpmqKLhedZPdYO9O3TIwozX9",
	"mSYbcjvHA1vhFq0WuEDHDNGlw1TaUyRhM/er4DbOqAL3eXq1v0I+oNsg5s7Fhe8m1Ae0NaGcLLNagF/c",
	"Jf+Xp8AP4tS1qqRn1OkBxaMrN8o217Z40WJHNGOzlf9xRd5KrnmBFrV/UG15nSbUfi4ZPgljm35TswUd",
	"k+JAALIGouo63Sy1Gsmu+F29dc8kotKBgkr/Itpj46F0duSLXO6y760y5hN53+z/lnANqzTOMI55j1GE",
	"vje7JhaxRgBa2z65bmv7vtWf3Buxf6swnLxjRCuqvdWrZ2l/9ivRPpxsK+Ilf2iodaQgPi+AOxRJvXLU",
	"Tzph6idWsP/aax55zMddsaXIczZDZup3olvYw0Pi+z0S+7pQElvqRdYhQvlUrhk/Qg3rtib13Pl+s7on",
	"L4hiu0KCl7r8PA2PUcSGfH63nbzOmjcvMA/C0SvszTLoh6jdeK2wumuoF82yqzQBl1lbRqNRrmKeZ8rY",
	"6CQMQ/c/uKeBsarMxTxzXSaEIF6ifaryx8XDw8rAZvNfAAAA//+6irjYsg4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
